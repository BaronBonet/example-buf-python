name: CI Python gRPC Buf

on:
    push

jobs:
    build:
      name: Build Python gRPC example
      runs-on: ubuntu-latest
      env:
        working-directory: .
      steps:
        - uses: actions/checkout@v2

        - name: Set up Python
          id: setup-python
          uses: actions/setup-python@v4
          with:
            python-version: '3.10'

        - name: Install Poetry
          uses: snok/install-poetry@v1
          with:
            virtualenvs-create: true
            virtualenvs-in-project: true
            installer-parallel: true

        - name: Load cached venv
          id: cached-poetry-dependencies
          uses: actions/cache@v2
          with:
            path: ${{ env.working-directory }}/.venv
            key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles(format('{0}/poetry.lock', env.working-directory)) }}

        - name: protobuf
          uses: bufbuild/buf-setup-action@v1
          with:
            version: "1.9.0"

        - name: Install dependencies
          if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
          working-directory: ${{ env.working-directory }}
          run: buf generate && poetry install

        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v2

        - name: Build image
          uses: docker/build-push-action@v2
          with:
            context: ${{ env.working-directory }}
            platforms: linux/amd64
            tags: test
            push: false
